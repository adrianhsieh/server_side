<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:context="http://www.springframework.org/schema/context" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="EE-3.6.0" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <context:property-placeholder location="api.properties" />
    <apikit:config name="apiConfig" raml="api.raml" consoleEnabled="true" consolePath="console" doc:name="Router" />
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration" />
    <db:mysql-config name="MySQL_Configuration" host="${db.url}" port="3306" user="${db.user}" password="${db.password}" database="${db.name}" doc:name="MySQL Configuration" />
    <flow name="main">
        <http:listener config-ref="HTTP_Listener_Configuration" doc:name="HTTP" path="/api/*" />
        <!-- <http:inbound-endpoint address="http://localhost:${http.port}/api" 
			doc:name="HTTP" exchange-pattern="request-response"/> -->
        <apikit:router config-ref="apiConfig" doc:name="APIkit Router" />
        <exception-strategy ref="apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="get:/devices:apiConfig">
        <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Payload" />
    </flow>
    <flow name="post:/devices/{deviceId}/positionreports:apiConfig">
        <json:json-to-object-transformer returnClass="java.util.List" doc:name="JSON to Object" />
        <logger message="Incoming HTTP: #[payload]" level="ERROR" doc:name="Logger" />
        <logger message="From Device: #[deviceId]" level="INFO" doc:name="Logger" />
        <logger message="Location Data: #[payload]" level="INFO" doc:name="Logger" />
        <collection-splitter doc:name="Collection Splitter" />
        <db:insert config-ref="MySQL_Configuration" doc:name="Insert Position">
            <db:parameterized-query><![CDATA[insert into positionreports  (deviceId, longitude,latitude,altitiude, accuracy, datetimestamp )
values(#[deviceId],  #[payload.longitude],#[payload.latitude], #[payload.altitiude], #[payload.accuracy], #[new Date(payload.datetimestamp)]);]]></db:parameterized-query>
        </db:insert>
        <set-payload value="#[['status':'Success', 'message':'Successfully Created']]" doc:name="Set Payload" />
        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator" />
    </flow>
    <flow name="get:/devices/{deviceId}/positionreports:apiConfig">
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties['http.query.params'].fromDateTime != null &amp;&amp; message.inboundProperties['http.query.params'].toDateTime != null]">
                <logger message="No date null" level="INFO" doc:name="Logger" />
                <db:select config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select * from positionreports where deviceId=#[deviceId] and datetimestamp > #[message.inboundProperties['http.query.params'].fromDateTime] and datetimestamp < #[message.inboundProperties['http.query.params'].toDateTime] limit ${db.limit}]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="#[message.inboundProperties['http.query.params'].fromDateTime != null &amp;&amp; message.inboundProperties['http.query.params'].toDateTime == null]">
                <logger message="To date null" level="INFO" doc:name="Logger" />
                <db:select config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select * from positionreports where deviceId=#[deviceId] and datetimestamp > #[message.inboundProperties['http.query.params'].fromDateTime] limit ${db.limit}]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="#[message.inboundProperties['http.query.params'].fromDateTime == null &amp;&amp; message.inboundProperties['http.query.params'].toDateTime != null]">
                <logger message="From date null" level="INFO" doc:name="Logger" />
                <db:select config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select * from positionreports where deviceId=#[deviceId] and datetimestamp < #[message.inboundProperties['http.query.params'].toDateTime] limit ${db.limit}]]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <db:select config-ref="MySQL_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[select from positionreports where deviceId=#[deviceId]]]></db:parameterized-query>
                </db:select>
            </otherwise>
        </choice>
    </flow>
    <flow name="get:/devices/{deviceId}/summaryreports:apiConfig">
        <logger message="Request summary" level="INFO" doc:name="Logger" />
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[select * from positionreports where deviceId=#[deviceId] and datetimestamp > #[message.inboundProperties['http.query.params'].fromDateTime] and datetimestamp < #[message.inboundProperties['http.query.params'].toDateTime] ORDER BY datetimestamp limit ${db.limit} ]]></db:parameterized-query>
        </db:select>
        <scripting:component doc:name="Create Static Map">
            <scripting:script engine="Groovy"><![CDATA[def url = 'https://maps.googleapis.com/maps/api/staticmap?size=480x480&path=color:0x0000ff|weight:4'

payload.each{
	url+='|'+it.latitude+','+it.longitude
}

return [['type':'staticmap', 'url':url]]]]></scripting:script>
        </scripting:component>
    </flow>
    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
    
   
    
</mule>
